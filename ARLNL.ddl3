DROP SEQUENCE ARLNL_Division_seq ; 
create sequence ARLNL_Division_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger ARLNL_Division_PK_trig 
before insert on ARLNL_Division
for each row 
begin 
select ARLNL_Division_seq.nextval into :new.division_id from dual; 
end; 
/
alter table ARLNL_Division add created date ; 
alter table ARLNL_Division add created_by VARCHAR2 (255) ; 
alter table ARLNL_Division add row_version_number integer ; 
alter table ARLNL_Division add updated date ; 
alter table ARLNL_Division add updated_by VARCHAR2 (255) ; 
/
create or replace trigger ARLNL_Division_AUD_trig 
before insert or update on ARLNL_Division 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE ARLNL_Document_seq ; 
create sequence ARLNL_Document_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger ARLNL_Document_PK_trig 
before insert on ARLNL_Document
for each row 
begin 
select ARLNL_Document_seq.nextval into :new.document_id from dual; 
end; 
/
alter table ARLNL_Document add created date ; 
alter table ARLNL_Document add created_by VARCHAR2 (255) ; 
alter table ARLNL_Document add row_version_number integer ; 
alter table ARLNL_Document add updated date ; 
alter table ARLNL_Document add updated_by VARCHAR2 (255) ; 
/
create or replace trigger ARLNL_Document_AUD_trig 
before insert or update on ARLNL_Document 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE ARLNL_Member_seq ; 
create sequence ARLNL_Member_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger ARLNL_Member_PK_trig 
before insert on ARLNL_Member
for each row 
begin 
select ARLNL_Member_seq.nextval into :new.member_id from dual; 
end; 
/
alter table ARLNL_Member add created date ; 
alter table ARLNL_Member add created_by VARCHAR2 (255) ; 
alter table ARLNL_Member add row_version_number integer ; 
alter table ARLNL_Member add updated date ; 
alter table ARLNL_Member add updated_by VARCHAR2 (255) ; 
/
create or replace trigger ARLNL_Member_AUD_trig 
before insert or update on ARLNL_Member 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE ARLNL_Membership_seq ; 
create sequence ARLNL_Membership_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger ARLNL_Membership_PK_trig 
before insert on ARLNL_Membership
for each row 
begin 
select ARLNL_Membership_seq.nextval into :new.membership_id from dual; 
end; 
/
alter table ARLNL_Membership add created date ; 
alter table ARLNL_Membership add created_by VARCHAR2 (255) ; 
alter table ARLNL_Membership add row_version_number integer ; 
alter table ARLNL_Membership add updated date ; 
alter table ARLNL_Membership add updated_by VARCHAR2 (255) ; 
/
create or replace trigger ARLNL_Membership_AUD_trig 
before insert or update on ARLNL_Membership 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE ARLNL_lab_seq ; 
create sequence ARLNL_lab_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger ARLNL_lab_PK_trig 
before insert on ARLNL_lab
for each row 
begin 
select ARLNL_lab_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table ARLNL_lab add created date ; 
alter table ARLNL_lab add created_by VARCHAR2 (255) ; 
alter table ARLNL_lab add row_version_number integer ; 
alter table ARLNL_lab add updated date ; 
alter table ARLNL_lab add updated_by VARCHAR2 (255) ; 
/
create or replace trigger ARLNL_lab_AUD_trig 
before insert or update on ARLNL_lab 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE ARL_Prov_Emps_seq ; 
create sequence ARL_Prov_Emps_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger ARL_Prov_Emps_PK_trig 
before insert on ARL_Prov_Emps
for each row 
begin 
select ARL_Prov_Emps_seq.nextval into :new.user_id from dual; 
end; 
/
alter table ARL_Prov_Emps add created date ; 
alter table ARL_Prov_Emps add created_by VARCHAR2 (255) ; 
alter table ARL_Prov_Emps add row_version_number integer ; 
alter table ARL_Prov_Emps add updated date ; 
alter table ARL_Prov_Emps add updated_by VARCHAR2 (255) ; 
/
create or replace trigger ARL_Prov_Emps_AUD_trig 
before insert or update on ARL_Prov_Emps 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX ARLNL_Member_member_id_FK_0 ;
CREATE INDEX ARLNL_Member_member_id_FK_0 ON ARLNL_Document(ARLNL_Member_member_id) ;
DROP INDEX ARL_Prov_Emps_user_id_FK_1 ;
CREATE INDEX ARL_Prov_Emps_user_id_FK_1 ON ARLNL_Member(ARL_Prov_Emps_user_id) ;
DROP INDEX ARLNL_Member_member_id_FK_2 ;
CREATE INDEX ARLNL_Member_member_id_FK_2 ON ARL_Prov_Emps(ARLNL_Member_member_id) ;
DROP INDEX parent_id_FK_3 ;
CREATE INDEX parent_id_FK_3 ON ARLNL_Membership(parent_id) ;
DROP INDEX child_id_FK_4 ;
CREATE INDEX child_id_FK_4 ON ARLNL_Membership(child_id) ;
